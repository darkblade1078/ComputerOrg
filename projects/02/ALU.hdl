// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    /*
        The ALU handles a lot of arithmitic for us
        What function we call upon depends on our zx-no inputs
        This is a very complicated gate to implement
        I hope I never have to accurately describe how the ALU works in practice
    */

    //ALU NO STAT

    //HANDLE X
    //whether we want X or 0
    Mux16(a=x, b[0..15]=false, sel=zx, out=zxOut);

    //flips our X output
    Not16(in=zxOut, out=notZxOut);

    //whether we want X to be flipped or not
    Mux16(a=zxOut, b=notZxOut, sel=nx, out=nxOut);


    //HANDLE Y
    //whether we want Y or 0
    Mux16(a=y, b[0..15]=false, sel=zy, out=zyOut);

    //flips our Y output
    Not16(in=zyOut, out=notZyOut);

    //whether we want Y to be flipped or not
    Mux16(a=zyOut, b=notZyOut, sel=ny, out=nyOut);

    
    //COMBINING X & Y
    //combines X and Y
    And16(a=nxOut, b=nyOut, out=xyAnd16Out);

    //adds together X and Y
    Add16(a=nxOut, b=nyOut, out=xyAdd16Out);

    //whether we want to complement x and y, or and them
    Mux16(a=xyAnd16Out, b=xyAdd16Out, sel=f, out=fOut);

    //flips our fOut
    Not16(in=fOut, out=notFOut);

    //whether we want to negate the output
    Mux16(a=fOut, b=notFOut, sel=no, out=noStatOut, out=out, out[15]=ng, out[0..7]=noStatOut1, out[8..15]=noStatOut2);


    //ALU
    //first 8 bits of our ALU nostat output combined
    Or8Way(in=noStatOut1, out=splitOut1);

    //last 8 bits of our ALU nostat output combined
    Or8Way(in=noStatOut2, out=splitOut2);

    //whether any of our outputs are = 1
    Or(a=splitOut1, b=splitOut2, out=combinedOut);

    //output to zr
    Not(in=combinedOut, out=zr);
}

