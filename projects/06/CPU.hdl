// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //check if we have a C or A instruction
    Not(in=instruction[15], out=negativeInstruction);

    //whether we take in the new instruction or whatever our ALU outputs
    Mux16(a=outtM, b=instruction, sel=negativeInstruction, out=newInstruction);

    Or(a=negativeInstruction, b=instruction[5], out=intoA); //whether we are loading data into our A register or not

	ARegister(in=newInstruction, load=intoA, out=AData, out[0..14]=addressM); //put data into our A register

    And(a=instruction[15], b=instruction[12], out=AorM); //whether our A register is being used for memory or for the data inside of the register

	Mux16(a=AData, b=inM, sel=AorM, out=AM); //load in either our A register data or memory data

    //what mathmatical function we're performing
    //It's what the 6 c's are for on the CPU abstraction slides
    ALU(x=DData, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outtM, zr=outIsZero, ng=outNegative);

    And(a=instruction[15],b=instruction[4],out=intoD); //whether or not we are loading data into our D register

	DRegister(in=outtM, load=intoD, out=DData); //load data into our D register

    And(a=instruction[15], b=instruction[3], out=writeM); //whether or not we are loading data into our current address in memory

    Not(in=outNegative, out=outPositive); //flip our is negative bit from the ALU

	Not(in=outIsZero, out=outNotZero); //flip our is zero bit from the ALU

	And(a=instruction[15], b=instruction[0], out=jgt); //checks if our first j bit is one or not

	And(a=outPositive, b=outNotZero, out=positiveNonZero); //whether the ALU outputted a zero or not

	And(a=jgt, b=positiveNonZero, out=ld1); //checking both and gates above if they are true

    And(a=instruction[15], b=instruction[1], out=jeq); //checks if our second j bit is one or not

	And(a=jeq, b=outIsZero, out=ld2); //checks if we have a zero and the gate above is true

    And(a=instruction[15], b=instruction[2], out=jlt); //checks if our third j bit is one or not

	And(a=jlt, b=outNegative, out=ld3); //checks if we have a negative number and the gate above is true

    Or(a=ld1, b=ld2, out=ldt); //if either j1 or j2 are one

	Or(a=ld3, b=ldt, out=ld); //whether or not our instruction has a jump or not

    PC(in=AData, load=ld, inc=true, reset=reset, out[0..14]=pc); //incriment our program counter
}
